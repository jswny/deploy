name: CI
on: [push]

env:
  GO_VERSION: '^1.15'
  CONTAINER_REGISTRY: 'ghcr.io'
  IMAGE_CACHE_PATH: '/tmp/.buildx-cache'

jobs:
  hadolint:
    name: Hadolint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: brpaz/hadolint-action@master
        with:
          dockerfile: 'Dockerfile'
  hadolint-example:
    name: Hadolint Example App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: brpaz/hadolint-action@master
        with:
          dockerfile: 'example/Dockerfile'
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.32
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Get Dependencies
        run: |
          go mod download
          go get github.com/axw/gocov/gocov
      - name: Run Tests
        run: go test -v -coverprofile=cover.out ./...
      - name: Coverage Report
        run: gocov convert cover.out | gocov report
      - name: Line Coverage Report
        run: gocov convert cover.out | gocov annotate -
  docker-image:
    name: Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test, hadolint]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Image Metadata
        id: image-metadata
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}
      - name: Cache Image Layers
        uses: actions/cache@v2
        env:
          base-key: ${{ runner.os }}-build-docker-buildx
        with:
          path: ${{ env.IMAGE_CACHE_PATH }}
          key: ${{ env.base-key }}-${{ github.sha }}
          restore-keys: |
            ${{ env.base-key }}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Build and Push to GitHub Container Registry
        id: docker-build
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.image-metadata.outputs.tags }}
          labels: ${{ steps.image-metadata.outpus.labels }}
          cache-from: type=local,src=${{ env.IMAGE_CACHE_PATH }}
          cache-to: type=local,dest=${{ env.IMAGE_CACHE_PATH }},mode=max
  deploy-example:
    name: Deploy Example App
    runs-on: ubuntu-latest
    needs: [lint, test, hadolint-example]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Image Metadata
        id: image-metadata
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}-example
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}
      - name: Cache Image Layers
        uses: actions/cache@v2
        env:
          base-key: ${{ runner.os }}-build-docker-buildx-example
        with:
          path: ${{ env.IMAGE_CACHE_PATH }}
          key: ${{ env.base-key }}-${{ github.sha }}
          restore-keys: |
            ${{ env.base-key }}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Build and Push to GitHub Container Registry
        id: image-build
        uses: docker/build-push-action@v2
        with:
          context: 'example'
          file: 'example/Dockerfile'
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.image-metadata.outputs.tags }}
          labels: ${{ steps.image-metadata.outpus.labels }}
          cache-from: type=local,src=${{ env.IMAGE_CACHE_PATH }}
          cache-to: type=local,dest=${{ env.IMAGE_CACHE_PATH }},mode=max
      - name: Deploy
        uses: ./
        if: ${{ github.event_name != 'pull_request' }}
        env:
          SAD_REGISTRY: ${{ steps.prep.outputs.registry }}
          SAD_IMAGE: ${{ github.repository }}
          SAD_SERVER: ${{ secrets.SERVER }}
          SAD_USERNAME: ${{ secrets.USERNAME }}
          SAD_PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          SAD_CHANNEL: ${{ steps.prep.outputs.channel }}
          SAD_DIGEST: ${{ steps.image-build.outputs.digest }}
          SAD_DEPLOY_FOO: ${{ secrets.FOO }}
          SAD_DEPLOY_BAR: ${{ secrets.BAR }}
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
