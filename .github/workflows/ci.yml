name: CI
on: [push]

jobs:
  hadolint:
    name: Hadolint Action
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: brpaz/hadolint-action@master
        with:
          dockerfile: 'action.Dockerfile'
  hadolint-example:
    name: Hadolint Example App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: brpaz/hadolint-action@master
        with:
          dockerfile: 'example/Dockerfile'
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v1
        with:
          version: v1.29
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.15'
      - name: Get Dependencies
        run: |
          go mod download
          go get github.com/axw/gocov/gocov
      - name: Run Tests
        run: go test -v -coverprofile=cover.out ./...
      - name: Coverage Report
        run: gocov convert cover.out | gocov report
      - name: Line Coverage Report
        run: gocov convert cover.out | gocov annotate -
  deploy-example:
    runs-on: ubuntu-latest
    name: Deploy Example App
    needs: [lint, test]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Prepare
        id: prep
        run: |
          REGISTRY='ghcr.io'
          DOCKER_IMAGE="${{ format('{0}-{2}', github.repository, 'example')}}"
          VERSION='latest'
          TAGS="$REGISTRY/$DOCKER_IMAGE:$VERSION"
          CHANNEL='stable'
          echo ::set-output name=registry::${REGISTRY}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=channel::${CHANNEL}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ steps.prep.outputs.registry }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Build and Push to GitHub Container Registry
        uses: docker/build-push-action@v2
        id: docker_build
        with:
          push: ${{ github.event_name != 'pull_request' }}
          context: 'example'
          file: 'example/Dockerfile'
          tags: ${{ steps.prep.outputs.tags }}
      - name: Deploy
        uses: ./
        id: deploy
        if: ${{ github.event_name != 'pull_request' }}
        env:
          SAD_REGISTRY: ${{ steps.prep.outputs.registry }}
          SAD_IMAGE: ${{ steps.prep.outputs.docker_image }}
          SAD_SERVER: ${{ secrets.SERVER }}
          SAD_USERNAME: ${{ secrets.USERNAME }}
          SAD_PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          SAD_CHANNEL: ${{ steps.prep.outputs.channel }}
          SAD_DIGEST: ${{ steps.docker_build.outputs.digest }}
          SAD_DEPLOY_FOO: ${{ secrets.FOO }}
          SAD_DEPLOY_BAR: ${{ secrets.BAR }}
