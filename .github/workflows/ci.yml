name: CI
on: [push]

jobs:
  shellcheck:
    name: ShellCheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        env:
          SHELLCHECK_OPTS: -e SC2029
  hadolint:
    name: Hadolint Action
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: brpaz/hadolint-action@master
  hadolint-app:
    name: Hadolint Demo App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: brpaz/hadolint-action@master
        with:
          dockerfile: 'app/Dockerfile'
  go-lint:
    name: Go Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v1
        with:
          version: v1.29
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.15'
      - name: Get Dependencies
        run: |
          go mod download
          go get github.com/axw/gocov/gocov
      - name: Run Tests
        run: go test -v -coverprofile=cover.out ./...
      - name: Coverage Report
        run: gocov convert cover.out | gocov report
      - name: Line Coverage Report
        run: gocov convert cover.out | gocov annotate -
  deploy-example:
    runs-on: ubuntu-latest
    name: Deploy Example App
    if: ${{ !contains(github.ref, 'refs/tags') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get Repo Metadata
        id: repo
        uses: actions/github-script@v3
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data
      - name: Prepare 
        id: prep
        run: |
          DOCKER_IMAGE="${{ format('{0}-{1}', github.repository, 'example')}}"
          VERSION=noop
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=tags::${TAGS}
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker Hub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and Push to Docker Hub
        uses: docker/build-push-action@v2
        id: docker_build
        with:
          push: ${{ github.event_name != 'pull_request' }}
          context: 'app'
          file: 'app/Dockerfile'
          tags: ${{ steps.prep.outputs.tags }}
      - name: Deploy
        uses: ./
        id: deploy
        env:
          SAD_REPOSITORY: ${{ steps.prep.outputs.docker_image }}
          SAD_SERVER: ${{ secrets.SERVER }}
          SAD_USERNAME: ${{ secrets.USERNAME }}
          SAD_PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          SAD_CHANNEL: 'beta'
          SAD_IMAGE_DIGEST: ${{ steps.docker_build.outputs.digest }}
          SAD_FOO: ${{ secrets.FOO_BETA }}
          SAD_BAR: ${{ secrets.BAR_BETA }}
      - name: Test Deployment
        run: |
          eval "$(ssh-agent -s)"
          ssh-add - <<< "$(echo ${{ secrets.PRIVATE_KEY }} | base64 -d)"
          result=$(ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER }} cd /srv/jswny-sad-example-beta && docker-compose up)
          if echo "$result" | grep -q 'not found'; then
            echo 'One or more environment variables were not loaded correctly!''
            echo "$result"
            exit 1
          else
            exit 0
          fi
          